the scope is defined as area in which certain variable can be worked with.
In programming also the scope of a variable is defined as the extent of the program code within which the variable can be accessed or declared or worked with. 
  There are mainly two types of variable scopes: 

Local Variables
Global Variables


  global is globally avilable anywhere in the program, they are declared at the top of code while local variables are declared within the functions  if there is a variable inside a function with the same name as that of a global variable and if the function tries to access the variable with that name, then which variable will be given precedence



 Usually when two variable with same name are defined then the compiler produces a compile time error. But if the variables are defined in different scopes then the compiler allows it.
Whenever there is a local variable defined with same name as that of a global variable then the compiler will give precedence to the local variable

   What if we want to do the opposite of above task. What if we want to access global variable when there is a local variable with same name? 

       cout << "Value of global x is " << ::x;  
     we use scope resolution operator :: to access it. we used it while using namespace.


       Storage classes :

       C++ Storage Classes are used to describe the characteristics of a variable/function. 
       It determines the lifetime, visibility, default value, and storage location which helps us to trace the existence of a particular variable during the runtime of a program.
         Storage class specifiers are used to specify the storage class for a variable.

Syntax
           storage_class var_data_type var_name;

           auto Storage Class
register Storage Class
extern Storage Class
static Storage Class


           1. auto Storage Class
The auto storage class is the default class of all the variables declared inside a block. 
  The auto stands for automatic and all the local variables that are declared in a block automatically belong to this class.

Properties of auto Storage Class Objects
Scope: Local
Default Value: Garbage Value
Memory Location: RAM
Lifetime: Till the end of its scope

   2. extern Storage Class
  The extern storage class simply tells us that the variable is defined elsewhere and not within the same block where it is used (i.e. external linkage). 
  Basically, the value is assigned to it in a different block and this can be overwritten/changed in a different block as well. 
  An extern variable is nothing but a global variable initialized 
  with a legal value where it is declared in order to be used elsewhere.

A normal global variable can be made extern as well by placing the ‘extern’ keyword before its declaration/definition in any function/block. 
  The main purpose of using extern variables is that they can be accessed between two different files which are part of a large program.


    

Properties of extern Storage Class Objects
Scope: Global
Default Value: Zero
Memory Location: RAM
Lifetime: Till the end of the program.

static Storage Class
The static storage class is used to declare static variables which are popularly used while writing programs in 
  C++ language. Static variables have the property of preserving their value even after they are out of their scope! Hence, static variables preserve the value of their last use in their scope.

We can say that they are initialized only once and exist until the termination of the program. 
  Thus, no new memory is allocated because they are not re-declared and reinitialization won't work on them. Global static variables can be accessed anywhere in the program.
    but to use them outside them the scope you have to declare them and they will be preserving their past value untill program end

Properties of static Storage Class
Scope: Local
Default Value: Zero
Memory Location: RAM
Lifetime: Till the end of the program



  register Storage Class
The register storage class declares register variables using the ‘register’ keyword which has the same functionality as that of the auto variables. 
  The only difference is that the compiler tries to store these variables in the register of the microprocessor if a free register is available.
    This makes the use of register variables to be much faster than that of the variables stored in the memory during the runtime of the program. 
      If a free register is not available, these are then stored in the memory only. 

An important and interesting point to be noted here is that we cannot obtain the address of a register variable using pointers.

Properties of register Storage Class Objects
Scope: Local
Default Value: Garbage Value
Memory Location: Register in CPU or RAM
Lifetime: Till the end of its scope

static keyword in c++
      The static keyword has different meanings when used with different types. We can use static keywords with:

Static Variables: Variables in a function, Variables in a class
Static Members of Class: Class objects and Functions in a class 


  Static variables in a Function: When a variable is declared as static, space for it gets allocated for the lifetime 
    of the program. Even if the function is called multiple times, space for the static variable is allocated only once and 
      the value of the variable in the previous call gets carried through the next function call. This is useful for 
        implementing coroutines in C/C++ or any other application where the previous state of function needs to be stored. 



    Static variables in a class: As the variables declared as static are initialized only once as 
      they are allocated space in separate static storage so, the static variables in a class are shared by the objects.
        There can not be multiple copies of the same static variables for different objects. Also because of this reason static variables can not be initialized using constructors

we will do static keyword for class  and function in class latter.

      
