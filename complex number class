#include <iostream>

class Complex {
  private:
  
  int real;
  int imaginary;
  
  public:
  Complex(int real, int imaginary){
      this -> real = real;
      this -> imaginary = imaginary;
      std::cout << "parmeter constructor called"<< std::endl;
  }
  //basically when we use this function we will be calling it through an object and we will be passing an object an as arguement.
  // we are making it a const and passing the reference as an arguement.
  
  //this is a pointer so this.real will not work
  void plus(Complex const &C){
      
      this -> real = this->real + C.real;
      this -> imaginary = this->imaginary + C.imaginary;
  }
  
  
  void minus(Complex const &C){
      
      this -> real = this->real - C.real;
      this -> imaginary = this->imaginary - C.imaginary;
  }
  
  void multi(Complex const &C){
      this -> real = (this->real * C.real) - (this->imaginary * C.imaginary) ;
      this -> imaginary = (this->real * C.imaginary ) + (this->imaginary * C.real) ;
  }
  
   void print(){
       std::cout << this ->real << " + "<< this->imaginary<<"i"<<std::endl;
   } 
   
   ~ Complex(){
       std::cout<<"Destructor called"<<std::endl;
   }
};

int main()
{
    std::cout<<"Hello World"<<std::endl;
    
    //create object
    
    Complex c1(5, 2);
    Complex c2(3, 2);
    
    c1.print();
    c2.print();
    
    std::cout<<"after Addition" << std::endl;
    //changed to c1
    c1.plus(c2);
    c1.print();
    
    std::cout<<"after subtraction" << std::endl;
    c1.minus(c2);
    c1.print();
    
    std::cout<<"after Multiplication" << std::endl;
    c1.multi(c2);
    c1.print();
    
    return 0;
}
